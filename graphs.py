import matplotlib.pyplot as plt
import numpy as np

err = np.load('NN150noiseesigma01_maeloss.npy')
err2 = np.load('NN160noiseesigma01_maeloss.npy')
err3 = np.load('NN170noiseesigma01_maeloss.npy')
err4 = np.load('NN180noiseesigma01_maeloss.npy')
#err2 = np.load('NN100noiseesigma01_maeloss.npy')
plt.rcParams.update({'font.size': 40})
f = plt.figure(figsize=(20,20))
plt.plot(err, label='TRN-DP(150)')
plt.plot(err2, label='TRN-DP(160)')
plt.plot(err3, label='TRN-DP(170)')
plt.plot(err4, label='TRN-DP(180)')
plt.yscale('log')
plt.grid()
plt.legend()
#plt.yticks(np.linspace(0.1, 1, 5))
plt.title('MAE loss on 60x60x3 tensors')
plt.savefig('60x60x3mae.png')

err = np.load('NN150noiseesigma01_mapeloss.npy')
err2 = np.load('NN160noiseesigma01_mapeloss.npy')
err3 = np.load('NN170noiseesigma01_mapeloss.npy')
err4 = np.load('NN180noiseesigma01_mapeloss.npy')
#err2 = np.load('NN100noiseesigma01_maeloss.npy')
f = plt.figure(figsize=(20,20))
plt.plot(err, label='TRN-DP(150)')
plt.plot(err2, label='TRN-DP(160)')
plt.plot(err3, label='TRN-DP(170)')
plt.plot(err4, label='TRN-DP(180)')
plt.yscale('log')
plt.grid()
plt.legend()
plt.title('MAPE loss on 60x60x3 tensors')
plt.savefig('60x60x3mape.png')

err = np.load('NN150noiseesigma01_mseloss.npy')
err2 = np.load('NN160noiseesigma01_mseloss.npy')
err3 = np.load('NN170noiseesigma01_mseloss.npy')
err4 = np.load('NN180noiseesigma01_mseloss.npy')
#err2 = np.load('NN100noiseesigma01_maeloss.npy')
f = plt.figure(figsize=(20,20))
plt.plot(err, label='TRN-DP(150)')
plt.plot(err2, label='TRN-DP(160)')
plt.plot(err3, label='TRN-DP(170)')
plt.plot(err4, label='TRN-DP(180)')
plt.yscale('log')
plt.grid()
plt.legend()
plt.title('RMSE loss on 60x60x3 tensors')
plt.savefig('60x60x3rmse.png')


err = np.load('errs.np.npy')
f = plt.figure(figsize=(20,20))
plt.plot(err, label='Frobenius error')
plt.grid()
plt.legend()
plt.title('Absolute Frobenius norm error depending on rank')
plt.savefig('helic.png')

err = np.load('times.np.npy')
f = plt.figure(figsize=(20,20))
plt.plot(err, label='Decompositon + summation time (s)')
plt.grid()
plt.legend()
plt.title('Decomposition-summation time depending on rank (in s)')
plt.savefig('helictime.png')